name: Issue Processor

on:
  issues:
    types: [labeled]

jobs:
  process-issue:
    name: Process Issue and Create PR
    runs-on: ubuntu-latest
    
    if: |
      (github.event.action == 'labeled' && github.event.label.name == 'processing')
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 1

      - name: Run Claude Code for Issue Implementation
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          
          additional_permissions: |
            actions: read

          allowed_tools: "Agent,Bash,Edit,MultiEdit,WebFetch,WebSearch,Write"
          
          direct_prompt: |
            このIssue #${{ github.event.issue.number }} を解決してください。
            実装が完了したら、pr-ready ラベルをこの Issue に追加してください
            - ラベル追加、PR作成、コメント追加のための権限は付与してありますかならず実行を試すこと
            - もし権限がなくて実行できなかった場合は、どの権限が足りないかを明示してください

            **タイトル**: ${{ github.event.issue.title }}
            
            **説明**:
            ${{ github.event.issue.body || '説明なし' }}

      - name: Remove processing label
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            try {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                name: 'processing'
              });
              console.log('Removed processing label');
            } catch (error) {
              console.log('processing label not found or already removed');
            }

      - name: Check for PR creation trigger
        id: check-pr-trigger
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            try {
              const issue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number
              });
              
              const hasPrReadyLabel = issue.data.labels.some(label => label.name === 'pr-ready');
              
              // コメントを取得してPRリンクを探す
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number
              });
              
              let hasPrLink = false;
              if (comments.data.length > 0) {
                const lastComment = comments.data[comments.data.length - 1];
                const prLinkMatch = lastComment.body.match(/https:\/\/github\.com\/[^\/\s]+\/[^\/\s]+\/compare\/[^\s)]+/);
                if (prLinkMatch) {
                  hasPrLink = true;
                  console.log('PR link found in latest comment:', prLinkMatch[0]);
                }
              }
              
              if (hasPrReadyLabel || hasPrLink) {
                if (hasPrReadyLabel) {
                  console.log('pr-ready label found');
                  // pr-ready ラベルを削除
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.payload.issue.number,
                    name: 'pr-ready'
                  });
                }
                if (hasPrLink) {
                  console.log('PR link found in latest comment');
                }
                
                core.setOutput('create_pr', 'true');
                core.setOutput('issue_number', context.payload.issue.number);
                core.setOutput('issue_title', issue.data.title);
              } else {
                console.log('Neither pr-ready label nor PR link found');
                core.setOutput('create_pr', 'false');
              }
            } catch (error) {
              console.error('Error checking PR creation trigger:', error);
              core.setOutput('create_pr', 'false');
            }

      - name: Generate GitHub App Token
        if: steps.check-pr-trigger.outputs.create_pr == 'true'
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Create Pull Request
        if: steps.check-pr-trigger.outputs.create_pr == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            try {
              const issueNumber = ${{ steps.check-pr-trigger.outputs.issue_number }};
              const issueTitle = `${{ steps.check-pr-trigger.outputs.issue_title }}`;
              
              // Get comments to find Create PR link
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });
              
              let prUrl = null;
              for (const comment of comments.data.reverse()) {
                const urlMatch = comment.body.match(/https:\/\/github\.com\/[^\/\s]+\/[^\/\s]+\/compare\/[^\s)]+/);
                if (urlMatch) {
                  prUrl = urlMatch[0];
                  break;
                }
              }
              
              if (!prUrl) {
                throw new Error('Create PR link not found in comments');
              }
              
              // Parse URL
              const urlObj = new URL(prUrl);
              const pathMatch = urlObj.pathname.match(/\/compare\/(.+)\.\.\.(.+)/);
              if (!pathMatch) {
                throw new Error('Invalid PR URL format');
              }
              
              const base = pathMatch[1];
              const head = pathMatch[2];
              
              // Create PR
              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Fix: ${issueTitle}`,
                body: `Fixes #${issueNumber}\n\nAuto-generated PR to resolve issue.`,
                head: head,
                base: base
              });
              
              // Add success comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `PR created: ${pr.data.html_url}`
              });
              
              // Add pr-created label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: ['pr-created']
              });
              
            } catch (error) {
              console.error('Error creating PR:', error);
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ steps.check-pr-trigger.outputs.issue_number }},
                body: `Error creating PR: ${error.message}`
              });
            }