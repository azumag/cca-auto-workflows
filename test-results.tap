1..144
ok 1 analyze-performance.sh exists and is executable
ok 2 script displays help information
ok 3 script sets proper error handling
ok 4 analyze_workflow_runtime function exists
not ok 5 analyze_workflow_runtime reports error when gh CLI not available
# (from function `assert_failure' in file tests/bats/bats-assert/src/assert_failure.bash, line 71,
#  in test file tests/analyze-performance.bats, line 57)
#   `assert_failure' failed
ok 6 analyze_workflow_runtime handles empty workflow data
not ok 7 analyze_workflow_runtime processes workflow data with jq
# (from function `__assert_stream' in file tests/bats/bats-assert/src/assert_output.bash, line 238,
#  from function `assert_output' in file tests/bats/bats-assert/src/assert_output.bash, line 125,
#  in test file tests/analyze-performance.bats, line 97)
#   `assert_output --partial "Recent workflow performance"' failed
ok 8 analyze_api_usage function exists
ok 9 analyze_api_usage handles API access failure
not ok 10 analyze_api_usage processes rate limit information
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/analyze-performance.bats, line 140)
#   `assert_success' failed
# 
# -- command failed --
# status : 1
# output (25 lines):
#   [0;32m[INFO][0m 📊 Starting performance analysis for Claude Code Auto Workflows...
# 
#   [0;34m[ANALYSIS][0m Analyzing workflow runtime performance...
#   [1;33m[WARN][0m No workflow run data available
# 
#   [0;34m[ANALYSIS][0m Analyzing GitHub API usage...
#   [0;31m[ERROR][0m Cannot access GitHub API rate limit information
# 
#   [0;34m[ANALYSIS][0m Analyzing workflow efficiency...
#   [1;33m[WARN][0m No workflow directory found
# 
#   [0;34m[ANALYSIS][0m Generating performance recommendations...
#   [0;32m[INFO][0m 💡 Performance Optimization Recommendations:
#   [0;32m[INFO][0m    1. 🚀 Enable dependency caching in workflows that install packages
#   [0;32m[INFO][0m    2. 🎯 Use conditional job execution to skip unnecessary work
#   [0;32m[INFO][0m    3. ⚡ Implement matrix strategies for parallel execution
#   [0;32m[INFO][0m    4. 📦 Use smaller, specific action versions instead of @latest
#   [0;32m[INFO][0m    5. 🔄 Consider workflow_dispatch for manual triggers to reduce automatic runs
#   [0;32m[INFO][0m    6. 📊 Monitor and clean up old workflow runs regularly
#   [0;32m[INFO][0m    7. 🏷️  Use labels efficiently to control workflow triggers
# 
#   [0;32m[INFO][0m 🎉 Performance analysis completed!
#   [0;32m[INFO][0m    Use the recommendations above to optimize your workflow performance.
#   [0;34m[ANALYSIS][0m Analyzing GitHub API usage...
#   [0;31m[ERROR][0m Cannot access GitHub API rate limit information
# --
# 
not ok 11 analyze_api_usage warns on high usage
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/analyze-performance.bats, line 165)
#   `assert_success' failed
# 
# -- command failed --
# status : 1
# output (25 lines):
#   [0;32m[INFO][0m 📊 Starting performance analysis for Claude Code Auto Workflows...
# 
#   [0;34m[ANALYSIS][0m Analyzing workflow runtime performance...
#   [1;33m[WARN][0m No workflow run data available
# 
#   [0;34m[ANALYSIS][0m Analyzing GitHub API usage...
#   [0;31m[ERROR][0m Cannot access GitHub API rate limit information
# 
#   [0;34m[ANALYSIS][0m Analyzing workflow efficiency...
#   [1;33m[WARN][0m No workflow directory found
# 
#   [0;34m[ANALYSIS][0m Generating performance recommendations...
#   [0;32m[INFO][0m 💡 Performance Optimization Recommendations:
#   [0;32m[INFO][0m    1. 🚀 Enable dependency caching in workflows that install packages
#   [0;32m[INFO][0m    2. 🎯 Use conditional job execution to skip unnecessary work
#   [0;32m[INFO][0m    3. ⚡ Implement matrix strategies for parallel execution
#   [0;32m[INFO][0m    4. 📦 Use smaller, specific action versions instead of @latest
#   [0;32m[INFO][0m    5. 🔄 Consider workflow_dispatch for manual triggers to reduce automatic runs
#   [0;32m[INFO][0m    6. 📊 Monitor and clean up old workflow runs regularly
#   [0;32m[INFO][0m    7. 🏷️  Use labels efficiently to control workflow triggers
# 
#   [0;32m[INFO][0m 🎉 Performance analysis completed!
#   [0;32m[INFO][0m    Use the recommendations above to optimize your workflow performance.
#   [0;34m[ANALYSIS][0m Analyzing GitHub API usage...
#   [0;31m[ERROR][0m Cannot access GitHub API rate limit information
# --
# 
ok 12 suggest_api_optimizations function provides recommendations
ok 13 analyze_workflow_efficiency function exists
ok 14 analyze_workflow_efficiency handles missing workflow directory
ok 15 analyze_workflow_efficiency analyzes existing workflows
not ok 16 analyze_workflow_efficiency detects caching usage
# (from function `__assert_stream' in file tests/bats/bats-assert/src/assert_output.bash, line 238,
#  from function `assert_output' in file tests/bats/bats-assert/src/assert_output.bash, line 125,
#  in test file tests/analyze-performance.bats, line 225)
#   `assert_output --partial "Using caching: 1/1"' failed
# 
# -- output does not contain substring --
# substring (1 lines):
#   Using caching: 1/1
# output (33 lines):
#   [0;32m[INFO][0m 📊 Starting performance analysis for Claude Code Auto Workflows...
# 
#   [0;34m[ANALYSIS][0m Analyzing workflow runtime performance...
#   [1;33m[WARN][0m No workflow run data available
# 
#   [0;34m[ANALYSIS][0m Analyzing GitHub API usage...
#   [0;31m[ERROR][0m Cannot access GitHub API rate limit information
# 
#   [0;34m[ANALYSIS][0m Analyzing workflow efficiency...
#   [0;32m[INFO][0m Workflow Configuration Analysis:
#   [0;32m[INFO][0m   📁 Total workflows: 1
#   [0;32m[INFO][0m   🚀 Using caching: 0/1 workflows
#   [0;32m[INFO][0m   🎯 Using conditionals: 0/1 workflows
#   [0;32m[INFO][0m   ⚡ Using matrix builds: 0/1 workflows
# 
#   [0;34m[ANALYSIS][0m Generating performance recommendations...
#   [0;32m[INFO][0m 💡 Performance Optimization Recommendations:
#   [0;32m[INFO][0m    1. 🚀 Enable dependency caching in workflows that install packages
#   [0;32m[INFO][0m    2. 🎯 Use conditional job execution to skip unnecessary work
#   [0;32m[INFO][0m    3. ⚡ Implement matrix strategies for parallel execution
#   [0;32m[INFO][0m    4. 📦 Use smaller, specific action versions instead of @latest
#   [0;32m[INFO][0m    5. 🔄 Consider workflow_dispatch for manual triggers to reduce automatic runs
#   [0;32m[INFO][0m    6. 📊 Monitor and clean up old workflow runs regularly
#   [0;32m[INFO][0m    7. 🏷️  Use labels efficiently to control workflow triggers
# 
#   [0;32m[INFO][0m 🎉 Performance analysis completed!
#   [0;32m[INFO][0m    Use the recommendations above to optimize your workflow performance.
#   [0;34m[ANALYSIS][0m Analyzing workflow efficiency...
#   [0;32m[INFO][0m Workflow Configuration Analysis:
#   [0;32m[INFO][0m   📁 Total workflows: 1
#   [0;32m[INFO][0m   🚀 Using caching: 0/1 workflows
#   [0;32m[INFO][0m   🎯 Using conditionals: 0/1 workflows
#   [0;32m[INFO][0m   ⚡ Using matrix builds: 0/1 workflows
# --
# 
ok 17 generate_performance_report provides recommendations
not ok 18 main function executes all analysis steps
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/analyze-performance.bats, line 246)
#   `assert_success' failed
# /tmp/tmp.dqWiN0p1u7/.github/workflows
not ok 19 script handles missing dependencies gracefully
# (from function `assert_failure' in file tests/bats/bats-assert/src/assert_failure.bash, line 71,
#  in test file tests/analyze-performance.bats, line 261)
#   `assert_failure' failed
ok 20 script uses proper color codes
ok 21 logging functions exist and work properly
ok 22 handles malformed JSON from GitHub API
ok 23 handles network timeouts and API failures
ok 24 validates workflow file extensions
ok 25 check-secrets.sh exists and is executable
ok 26 script has proper error handling
ok 27 script defines security check patterns
ok 28 check_hardcoded_secrets function exists
ok 29 check_hardcoded_secrets reports no issues for clean repository
not ok 30 check_hardcoded_secrets detects password patterns
# (from function `assert_failure' in file tests/bats/bats-assert/src/assert_failure.bash, line 71,
#  in test file tests/check-secrets.bats, line 68)
#   `assert_failure' failed
# 
# -- command succeeded, but it was expected to fail --
# output (10 lines):
#   [0;32m[INFO][0m 🔒 Starting security check for Claude Code Auto Workflows...
#   [0;32m[INFO][0m Checking for hardcoded secrets...
#   [0;32m[INFO][0m ✅ No hardcoded secrets detected
#   [0;32m[INFO][0m Checking workflow files for proper secret usage...
#   [0;32m[INFO][0m ✅ Workflow secret usage check completed
#   [0;32m[INFO][0m Checking for overly permissive workflow permissions...
#   [0;32m[INFO][0m ✅ No permission issues found
#   [0;32m[INFO][0m 🎉 Security check completed successfully!
#   [0;32m[INFO][0m Checking for hardcoded secrets...
#   [0;32m[INFO][0m ✅ No hardcoded secrets detected
# --
# 
ok 31 check_hardcoded_secrets detects API key patterns
ok 32 check_hardcoded_secrets detects GitHub tokens
ok 33 check_hardcoded_secrets detects GitHub PAT tokens
ok 34 check_hardcoded_secrets excludes test directories
ok 35 check_hardcoded_secrets excludes documentation files
ok 36 check_workflow_secrets function exists
ok 37 check_workflow_secrets handles missing workflow directory
not ok 38 check_workflow_secrets validates GITHUB_TOKEN usage
# (from function `__assert_stream' in file tests/bats/bats-assert/src/assert_output.bash, line 238,
#  from function `assert_output' in file tests/bats/bats-assert/src/assert_output.bash, line 125,
#  in test file tests/check-secrets.bats, line 167)
#   `assert_output --partial "uses only GITHUB_TOKEN"' failed
# 
# -- output does not contain substring --
# substring (1 lines):
#   uses only GITHUB_TOKEN
# output (10 lines):
#   [0;32m[INFO][0m 🔒 Starting security check for Claude Code Auto Workflows...
#   [0;32m[INFO][0m Checking for hardcoded secrets...
#   [0;32m[INFO][0m ✅ No hardcoded secrets detected
#   [0;32m[INFO][0m Checking workflow files for proper secret usage...
#   [0;32m[INFO][0m ✅ Workflow secret usage check completed
#   [0;32m[INFO][0m Checking for overly permissive workflow permissions...
#   [0;32m[INFO][0m ✅ No permission issues found
#   [0;32m[INFO][0m 🎉 Security check completed successfully!
#   [0;32m[INFO][0m Checking workflow files for proper secret usage...
#   [0;32m[INFO][0m ✅ Workflow secret usage check completed
# --
# 
not ok 39 check_workflow_secrets warns about custom secrets
# (from function `__assert_stream' in file tests/bats/bats-assert/src/assert_output.bash, line 238,
#  from function `assert_output' in file tests/bats/bats-assert/src/assert_output.bash, line 125,
#  in test file tests/check-secrets.bats, line 193)
#   `assert_output --partial "uses custom secrets"' failed
# 
# -- output does not contain substring --
# substring (1 lines):
#   uses custom secrets
# output (10 lines):
#   [0;32m[INFO][0m 🔒 Starting security check for Claude Code Auto Workflows...
#   [0;32m[INFO][0m Checking for hardcoded secrets...
#   [0;32m[INFO][0m ✅ No hardcoded secrets detected
#   [0;32m[INFO][0m Checking workflow files for proper secret usage...
#   [0;32m[INFO][0m ✅ Workflow secret usage check completed
#   [0;32m[INFO][0m Checking for overly permissive workflow permissions...
#   [0;32m[INFO][0m ✅ No permission issues found
#   [0;32m[INFO][0m 🎉 Security check completed successfully!
#   [0;32m[INFO][0m Checking workflow files for proper secret usage...
#   [0;32m[INFO][0m ✅ Workflow secret usage check completed
# --
# 
ok 40 check_permissions function exists
not ok 41 check_permissions warns about missing permissions
# (from function `__assert_stream' in file tests/bats/bats-assert/src/assert_output.bash, line 238,
#  from function `assert_output' in file tests/bats/bats-assert/src/assert_output.bash, line 125,
#  in test file tests/check-secrets.bats, line 220)
#   `assert_output --partial "doesn't specify permissions"' failed
# 
# -- output does not contain substring --
# substring (1 lines):
#   doesn't specify permissions
# output (10 lines):
#   [0;32m[INFO][0m 🔒 Starting security check for Claude Code Auto Workflows...
#   [0;32m[INFO][0m Checking for hardcoded secrets...
#   [0;32m[INFO][0m ✅ No hardcoded secrets detected
#   [0;32m[INFO][0m Checking workflow files for proper secret usage...
#   [0;32m[INFO][0m ✅ Workflow secret usage check completed
#   [0;32m[INFO][0m Checking for overly permissive workflow permissions...
#   [0;32m[INFO][0m ✅ No permission issues found
#   [0;32m[INFO][0m 🎉 Security check completed successfully!
#   [0;32m[INFO][0m Checking for overly permissive workflow permissions...
#   [0;32m[INFO][0m ✅ No permission issues found
# --
# 
not ok 42 check_permissions warns about write-all permissions
# (from function `__assert_stream' in file tests/bats/bats-assert/src/assert_output.bash, line 238,
#  from function `assert_output' in file tests/bats/bats-assert/src/assert_output.bash, line 125,
#  in test file tests/check-secrets.bats, line 243)
#   `assert_output --partial "uses 'write-all' permissions"' failed
# 
# -- output does not contain substring --
# substring (1 lines):
#   uses 'write-all' permissions
# output (10 lines):
#   [0;32m[INFO][0m 🔒 Starting security check for Claude Code Auto Workflows...
#   [0;32m[INFO][0m Checking for hardcoded secrets...
#   [0;32m[INFO][0m ✅ No hardcoded secrets detected
#   [0;32m[INFO][0m Checking workflow files for proper secret usage...
#   [0;32m[INFO][0m ✅ Workflow secret usage check completed
#   [0;32m[INFO][0m Checking for overly permissive workflow permissions...
#   [0;32m[INFO][0m ✅ No permission issues found
#   [0;32m[INFO][0m 🎉 Security check completed successfully!
#   [0;32m[INFO][0m Checking for overly permissive workflow permissions...
#   [0;32m[INFO][0m ✅ No permission issues found
# --
# 
ok 43 check_permissions approves minimal permissions
ok 44 main function executes all security checks
not ok 45 main function reports failures correctly
# (from function `assert_failure' in file tests/bats/bats-assert/src/assert_failure.bash, line 71,
#  in test file tests/check-secrets.bats, line 290)
#   `assert_failure' failed
# 
# -- command succeeded, but it was expected to fail --
# output (16 lines):
#   [0;32m[INFO][0m 🔒 Starting security check for Claude Code Auto Workflows...
#   [0;32m[INFO][0m Checking for hardcoded secrets...
#   [0;32m[INFO][0m ✅ No hardcoded secrets detected
#   [0;32m[INFO][0m Checking workflow files for proper secret usage...
#   [0;32m[INFO][0m ✅ Workflow secret usage check completed
#   [0;32m[INFO][0m Checking for overly permissive workflow permissions...
#   [0;32m[INFO][0m ✅ No permission issues found
#   [0;32m[INFO][0m 🎉 Security check completed successfully!
#   [0;32m[INFO][0m 🔒 Starting security check for Claude Code Auto Workflows...
#   [0;32m[INFO][0m Checking for hardcoded secrets...
#   [0;32m[INFO][0m ✅ No hardcoded secrets detected
#   [0;32m[INFO][0m Checking workflow files for proper secret usage...
#   [0;32m[INFO][0m ✅ Workflow secret usage check completed
#   [0;32m[INFO][0m Checking for overly permissive workflow permissions...
#   [0;32m[INFO][0m ✅ No permission issues found
#   [0;32m[INFO][0m 🎉 Security check completed successfully!
# --
# 
ok 46 script handles grep errors gracefully
ok 47 script properly escapes regex patterns
ok 48 script reports correct line numbers and files
ok 49 logging functions work properly
ok 50 script uses proper exit codes
not ok 51 detects OpenAI API keys
# (from function `assert_failure' in file tests/bats/bats-assert/src/assert_failure.bash, line 71,
#  in test file tests/check-secrets.bats, line 374)
#   `assert_failure' failed
# 
# -- command succeeded, but it was expected to fail --
# output (10 lines):
#   [0;32m[INFO][0m 🔒 Starting security check for Claude Code Auto Workflows...
#   [0;32m[INFO][0m Checking for hardcoded secrets...
#   [0;32m[INFO][0m ✅ No hardcoded secrets detected
#   [0;32m[INFO][0m Checking workflow files for proper secret usage...
#   [0;32m[INFO][0m ✅ Workflow secret usage check completed
#   [0;32m[INFO][0m Checking for overly permissive workflow permissions...
#   [0;32m[INFO][0m ✅ No permission issues found
#   [0;32m[INFO][0m 🎉 Security check completed successfully!
#   [0;32m[INFO][0m Checking for hardcoded secrets...
#   [0;32m[INFO][0m ✅ No hardcoded secrets detected
# --
# 
not ok 52 ignores comments with example secrets
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/check-secrets.bats, line 392)
#   `assert_success' failed
# 
# -- command failed --
# status : 1
# output (12 lines):
#   [0;32m[INFO][0m 🔒 Starting security check for Claude Code Auto Workflows...
#   [0;32m[INFO][0m Checking for hardcoded secrets...
#   /tmp/tmp.V7g0g3QjEI/test-repo/src/config.js:// Example: password: "your_password_here"
#   [0;31m[ERROR][0m Potential hardcoded secret found matching pattern: password\s*[:=]\s*['"][^'"]{8,}['"]
#   /tmp/tmp.V7g0g3QjEI/test-repo/src/config.js:    // secret: "example_secret_12345678"
#   [0;31m[ERROR][0m Potential hardcoded secret found matching pattern: secret\s*[:=]\s*['"][^'"]{16,}['"]
#   [0;31m[ERROR][0m ❌ Found 2 potential security issues
#   [0;32m[INFO][0m Checking workflow files for proper secret usage...
#   [0;32m[INFO][0m ✅ Workflow secret usage check completed
#   [0;32m[INFO][0m Checking for overly permissive workflow permissions...
#   [0;32m[INFO][0m ✅ No permission issues found
#   [0;31m[ERROR][0m ❌ Security check found issues that need attention
# --
# 
ok 53 cleanup-old-runs.sh exists and is executable
ok 54 script has proper error handling
not ok 55 script shows help when requested
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/cleanup-old-runs.bats, line 39)
#   `assert_success' failed
# 
# -- command failed --
# status : 1
# output (2 lines):
#   [0;32m[INFO][0m 🧹 Starting workflow runs cleanup for Claude Code Auto Workflows...
#   [0;31m[ERROR][0m Not authenticated with GitHub CLI. Please run: gh auth login
# --
# 
not ok 56 script shows help with -h flag
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/cleanup-old-runs.bats, line 47)
#   `assert_success' failed
# 
# -- command failed --
# status : 1
# output (2 lines):
#   [0;32m[INFO][0m 🧹 Starting workflow runs cleanup for Claude Code Auto Workflows...
#   [0;31m[ERROR][0m Not authenticated with GitHub CLI. Please run: gh auth login
# --
# 
not ok 57 script fails with unknown option
# (from function `__assert_stream' in file tests/bats/bats-assert/src/assert_output.bash, line 238,
#  from function `assert_output' in file tests/bats/bats-assert/src/assert_output.bash, line 125,
#  in test file tests/cleanup-old-runs.bats, line 54)
#   `assert_output --partial "Unknown option"' failed
# 
# -- output does not contain substring --
# substring : Unknown option
# output    : [0;32m[INFO][0m 🧹 Starting workflow runs cleanup for Claude Code Auto Workflows...
# --
# 
not ok 58 parse_arguments function handles default values
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/cleanup-old-runs.bats, line 59)
#   `assert_success' failed
# 
# -- command failed --
# status : 1
# output (2 lines):
#   [0;32m[INFO][0m 🧹 Starting workflow runs cleanup for Claude Code Auto Workflows...
#   [0;31m[ERROR][0m Not authenticated with GitHub CLI. Please run: gh auth login
# --
# 
not ok 59 parse_arguments handles --days option
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/cleanup-old-runs.bats, line 65)
#   `assert_success' failed
# 
# -- command failed --
# status : 1
# output (2 lines):
#   [0;32m[INFO][0m 🧹 Starting workflow runs cleanup for Claude Code Auto Workflows...
#   [0;31m[ERROR][0m Not authenticated with GitHub CLI. Please run: gh auth login
# --
# 
not ok 60 parse_arguments handles --max-runs option
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/cleanup-old-runs.bats, line 71)
#   `assert_success' failed
# 
# -- command failed --
# status : 1
# output (2 lines):
#   [0;32m[INFO][0m 🧹 Starting workflow runs cleanup for Claude Code Auto Workflows...
#   [0;31m[ERROR][0m Not authenticated with GitHub CLI. Please run: gh auth login
# --
# 
not ok 61 parse_arguments handles both options together
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/cleanup-old-runs.bats, line 77)
#   `assert_success' failed
# 
# -- command failed --
# status : 1
# output (2 lines):
#   [0;32m[INFO][0m 🧹 Starting workflow runs cleanup for Claude Code Auto Workflows...
#   [0;31m[ERROR][0m Not authenticated with GitHub CLI. Please run: gh auth login
# --
# 
not ok 62 parse_arguments validates --days argument
# (from function `__assert_stream' in file tests/bats/bats-assert/src/assert_output.bash, line 238,
#  from function `assert_output' in file tests/bats/bats-assert/src/assert_output.bash, line 125,
#  in test file tests/cleanup-old-runs.bats, line 84)
#   `assert_output --partial "Invalid or missing value for --days"' failed
# 
# -- output does not contain substring --
# substring (1 lines):
#   Invalid or missing value for --days
# output (2 lines):
#   [0;32m[INFO][0m 🧹 Starting workflow runs cleanup for Claude Code Auto Workflows...
#   [0;31m[ERROR][0m Not authenticated with GitHub CLI. Please run: gh auth login
# --
# 
not ok 63 parse_arguments validates --max-runs argument
# (from function `__assert_stream' in file tests/bats/bats-assert/src/assert_output.bash, line 238,
#  from function `assert_output' in file tests/bats/bats-assert/src/assert_output.bash, line 125,
#  in test file tests/cleanup-old-runs.bats, line 90)
#   `assert_output --partial "Invalid or missing value for --max-runs"' failed
# 
# -- output does not contain substring --
# substring (1 lines):
#   Invalid or missing value for --max-runs
# output (2 lines):
#   [0;32m[INFO][0m 🧹 Starting workflow runs cleanup for Claude Code Auto Workflows...
#   [0;31m[ERROR][0m Not authenticated with GitHub CLI. Please run: gh auth login
# --
# 
not ok 64 parse_arguments sets DRY_RUN flag
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/cleanup-old-runs.bats, line 96)
#   `assert_success' failed
# 
# -- command failed --
# status : 1
# output (2 lines):
#   [0;32m[INFO][0m 🧹 Starting workflow runs cleanup for Claude Code Auto Workflows...
#   [0;31m[ERROR][0m Not authenticated with GitHub CLI. Please run: gh auth login
# --
# 
not ok 65 parse_arguments sets FORCE flag
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/cleanup-old-runs.bats, line 103)
#   `assert_success' failed
# 
# -- command failed --
# status : 1
# output (2 lines):
#   [0;32m[INFO][0m 🧹 Starting workflow runs cleanup for Claude Code Auto Workflows...
#   [0;31m[ERROR][0m Not authenticated with GitHub CLI. Please run: gh auth login
# --
# 
not ok 66 check_prerequisites fails without gh CLI
# (from function `__assert_stream' in file tests/bats/bats-assert/src/assert_output.bash, line 238,
#  from function `assert_output' in file tests/bats/bats-assert/src/assert_output.bash, line 125,
#  in test file tests/cleanup-old-runs.bats, line 118)
#   `assert_output --partial "GitHub CLI (gh) is required"' failed
ok 67 check_prerequisites fails when not authenticated
not ok 68 check_prerequisites fails when repository not accessible
# (from function `__assert_stream' in file tests/bats/bats-assert/src/assert_output.bash, line 238,
#  from function `assert_output' in file tests/bats/bats-assert/src/assert_output.bash, line 125,
#  in test file tests/cleanup-old-runs.bats, line 149)
#   `assert_output --partial "Cannot access repository"' failed
not ok 69 check_prerequisites passes with all requirements met
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/cleanup-old-runs.bats, line 158)
#   `assert_success' failed
not ok 70 analyze_workflow_runs function processes run data
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/cleanup-old-runs.bats, line 193)
#   `assert_success' failed
not ok 71 identify_cleanup_candidates calculates old runs correctly
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/cleanup-old-runs.bats, line 227)
#   `assert_success' failed
# 
# -- command failed --
# status : 1
# output (2 lines):
#   [0;32m[INFO][0m 🧹 Starting workflow runs cleanup for Claude Code Auto Workflows...
#   [0;31m[ERROR][0m Not authenticated with GitHub CLI. Please run: gh auth login
# --
# 
not ok 72 perform_cleanup shows dry run information
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/cleanup-old-runs.bats, line 234)
#   `assert_success' failed
# 
# -- command failed --
# status : 1
# output (2 lines):
#   [0;32m[INFO][0m 🧹 Starting workflow runs cleanup for Claude Code Auto Workflows...
#   [0;31m[ERROR][0m Not authenticated with GitHub CLI. Please run: gh auth login
# --
# 
not ok 73 perform_cleanup prompts for confirmation when not forced
# (from function `__assert_stream' in file tests/bats/bats-assert/src/assert_output.bash, line 238,
#  from function `assert_output' in file tests/bats/bats-assert/src/assert_output.bash, line 125,
#  in test file tests/cleanup-old-runs.bats, line 247)
#   `assert_output --partial "permanently delete workflow runs"' failed
not ok 74 perform_cleanup skips confirmation when forced
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/cleanup-old-runs.bats, line 270)
#   `assert_success' failed
not ok 75 perform_cleanup handles deletion failures gracefully
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/cleanup-old-runs.bats, line 294)
#   `assert_success' failed
not ok 76 main function parses arguments and executes workflow
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/cleanup-old-runs.bats, line 325)
#   `assert_success' failed
ok 77 main function handles argument parsing errors
ok 78 script handles missing jq dependency
ok 79 script uses proper color codes for output
not ok 80 logging functions include proper prefixes
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/cleanup-old-runs.bats, line 367)
#   `assert_success' failed
# 
# -- command failed --
# status : 1
# output (2 lines):
#   [0;32m[INFO][0m 🧹 Starting workflow runs cleanup for Claude Code Auto Workflows...
#   [0;31m[ERROR][0m Not authenticated with GitHub CLI. Please run: gh auth login
# --
# 
ok 81 handles invalid date calculations
ok 82 handles network timeouts during API calls
not ok 83 validates numeric arguments properly
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/cleanup-old-runs.bats, line 410)
#   `assert_success' failed
# 
# -- command failed --
# status : 1
# output (2 lines):
#   [0;32m[INFO][0m 🧹 Starting workflow runs cleanup for Claude Code Auto Workflows...
#   [0;31m[ERROR][0m Not authenticated with GitHub CLI. Please run: gh auth login
# --
# 
ok 84 create-labels.sh exists and is executable
ok 85 script has proper error handling
ok 86 script shows help when requested
ok 87 script shows help with -h flag
ok 88 script fails with unknown option
ok 89 script sets dry run mode correctly
not ok 90 script requires GitHub CLI
# (from function `__assert_stream' in file tests/bats/bats-assert/src/assert_output.bash, line 238,
#  from function `assert_output' in file tests/bats/bats-assert/src/assert_output.bash, line 125,
#  in test file tests/create-labels.bats, line 74)
#   `assert_output --partial "GitHub CLI (gh) is not installed"' failed
ok 91 script requires GitHub authentication
not ok 92 script requires git repository
# (from function `__assert_stream' in file tests/bats/bats-assert/src/assert_output.bash, line 238,
#  from function `assert_output' in file tests/bats/bats-assert/src/assert_output.bash, line 125,
#  in test file tests/create-labels.bats, line 107)
#   `assert_output --partial "Not in a git repository"' failed
not ok 93 script requires repository access
# (from function `__assert_stream' in file tests/bats/bats-assert/src/assert_output.bash, line 238,
#  from function `assert_output' in file tests/bats/bats-assert/src/assert_output.bash, line 125,
#  in test file tests/create-labels.bats, line 124)
#   `assert_output --partial "Cannot access repository"' failed
not ok 94 create_label function validates inputs
# (from function `source' in file ./scripts/create-labels.sh, line 71,
#  in test file tests/create-labels.bats, line 129)
#   `source "$SCRIPT_PATH"' failed
# 🏷️  Creating required labels for Claude Code Auto Workflows...
# ❌ Not authenticated with GitHub CLI. Please run: gh auth login
not ok 95 create_label function validates color format
# (from function `source' in file ./scripts/create-labels.sh, line 71,
#  in test file tests/create-labels.bats, line 143)
#   `source "$SCRIPT_PATH"' failed
# 🏷️  Creating required labels for Claude Code Auto Workflows...
# ❌ Not authenticated with GitHub CLI. Please run: gh auth login
not ok 96 create_label function works in dry run mode
# (from function `source' in file ./scripts/create-labels.sh, line 71,
#  in test file tests/create-labels.bats, line 160)
#   `source "$SCRIPT_PATH"' failed
# 🏷️  Creating required labels for Claude Code Auto Workflows...
# ❌ Not authenticated with GitHub CLI. Please run: gh auth login
not ok 97 create_label function creates new labels
# (from function `source' in file ./scripts/create-labels.sh, line 71,
#  in test file tests/create-labels.bats, line 169)
#   `source "$SCRIPT_PATH"' failed
# 🏷️  Creating required labels for Claude Code Auto Workflows...
# ❌ Not authenticated with GitHub CLI. Please run: gh auth login
not ok 98 create_label function detects existing labels
# (from function `source' in file ./scripts/create-labels.sh, line 71,
#  in test file tests/create-labels.bats, line 191)
#   `source "$SCRIPT_PATH"' failed
# 🏷️  Creating required labels for Claude Code Auto Workflows...
# ❌ Not authenticated with GitHub CLI. Please run: gh auth login
not ok 99 create_label function updates labels when forced
# (from function `source' in file ./scripts/create-labels.sh, line 71,
#  in test file tests/create-labels.bats, line 218)
#   `source "$SCRIPT_PATH"' failed
# 🏷️  Creating required labels for Claude Code Auto Workflows...
# ❌ Not authenticated with GitHub CLI. Please run: gh auth login
not ok 100 create_label function handles creation failures
# (from function `source' in file ./scripts/create-labels.sh, line 71,
#  in test file tests/create-labels.bats, line 248)
#   `source "$SCRIPT_PATH"' failed
# 🏷️  Creating required labels for Claude Code Auto Workflows...
# ❌ Not authenticated with GitHub CLI. Please run: gh auth login
ok 101 script defines required label categories
ok 102 script includes all required issue processing labels
ok 103 script includes PR review labels
ok 104 script includes CI status labels
ok 105 script includes standard GitHub labels
not ok 106 process_labels function works correctly
# (from function `source' in file ./scripts/create-labels.sh, line 71,
#  in test file tests/create-labels.bats, line 328)
#   `source "$SCRIPT_PATH"' failed
# 🏷️  Creating required labels for Claude Code Auto Workflows...
# ❌ Not authenticated with GitHub CLI. Please run: gh auth login
not ok 107 process_labels function handles failures
# (from function `source' in file ./scripts/create-labels.sh, line 71,
#  in test file tests/create-labels.bats, line 350)
#   `source "$SCRIPT_PATH"' failed
# 🏷️  Creating required labels for Claude Code Auto Workflows...
# ❌ Not authenticated with GitHub CLI. Please run: gh auth login
not ok 108 main script execution processes all label categories
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/create-labels.bats, line 384)
#   `assert_success' failed
not ok 109 script provides final summary
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/create-labels.bats, line 398)
#   `assert_success' failed
ok 110 script handles GitHub API errors gracefully
ok 111 script validates color codes for all labels
not ok 112 logging functions work properly
# (from function `source' in file ./scripts/create-labels.sh, line 71,
#  in test file tests/create-labels.bats, line 438)
#   `source "$SCRIPT_PATH"' failed
# 🏷️  Creating required labels for Claude Code Auto Workflows...
# ❌ Not authenticated with GitHub CLI. Please run: gh auth login
not ok 113 quiet mode suppresses info output
# (from function `source' in file ./scripts/create-labels.sh, line 71,
#  in test file tests/create-labels.bats, line 451)
#   `source "$SCRIPT_PATH"' failed
# 🏷️  Creating required labels for Claude Code Auto Workflows...
# ❌ Not authenticated with GitHub CLI. Please run: gh auth login
not ok 114 script uses proper exit codes
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/create-labels.bats, line 471)
#   `assert_success' failed
ok 115 validate-workflows.sh exists and is executable
ok 116 script has proper error handling
ok 117 script initializes error and warning counters
ok 118 script defines required validation functions
ok 119 check_yaml_syntax handles missing workflow directory
ok 120 check_yaml_syntax validates with yq when available
not ok 121 check_yaml_syntax detects YAML syntax errors with yq
# (from function `__assert_stream' in file tests/bats/bats-assert/src/assert_output.bash, line 238,
#  from function `assert_output' in file tests/bats/bats-assert/src/assert_output.bash, line 125,
#  in test file tests/validate-workflows.bats, line 132)
#   `assert_output --partial "YAML syntax error"' failed
ok 122 check_yaml_syntax falls back to python when yq unavailable
not ok 123 validate_github_actions_schema checks required fields
# (from function `assert_failure' in file tests/bats/bats-assert/src/assert_failure.bash, line 71,
#  in test file tests/validate-workflows.bats, line 186)
#   `assert_failure' failed
# 
# -- command succeeded, but it was expected to fail --
# output (30 lines):
#   [0;32m[INFO][0m 🔍 Starting workflow validation for Claude Code Auto Workflows...
# 
#   [0;34m[VALIDATION][0m Checking YAML syntax...
#   [0;32m[INFO][0m ✅ All workflow files have valid YAML syntax
# 
#   [0;34m[VALIDATION][0m Checking required workflow fields...
# 
#   [0;34m[VALIDATION][0m Checking security best practices...
# 
#   [0;34m[VALIDATION][0m Checking performance optimizations...
# 
#   [0;34m[VALIDATION][0m Checking workflow naming conventions...
# 
#   [0;34m[VALIDATION][0m Checking workflow dependencies...
#   [0;32m[INFO][0m 📦 Actions used in workflows:
#   [0;32m[INFO][0m    •
# 
#   [0;34m[VALIDATION][0m Validation Summary
#   [0;32m[INFO][0m 📊 Validation Results:
#   [0;32m[INFO][0m    Errors: 0
#   [0;32m[INFO][0m    Warnings: 0
#   [0;32m[INFO][0m 🎉 All workflows passed validation!
# 
#   [0;32m[INFO][0m 💡 General Recommendations:
#   [0;32m[INFO][0m    • Pin action versions to specific commits or tags
#   [0;32m[INFO][0m    • Use minimal permissions for security
#   [0;32m[INFO][0m    • Add caching for dependencies
#   [0;32m[INFO][0m    • Use conditional execution to skip unnecessary steps
#   [0;32m[INFO][0m    • Keep workflow files well-documented
#   [0;32m[INFO][0m    • Regularly update action versions
# --
# 
ok 124 validate_github_actions_basic checks fields with grep
ok 125 check_required_fields validates all workflow files
not ok 126 check_security_best_practices detects unpinned actions
# (from function `__assert_stream' in file tests/bats/bats-assert/src/assert_output.bash, line 238,
#  from function `assert_output' in file tests/bats/bats-assert/src/assert_output.bash, line 125,
#  in test file tests/validate-workflows.bats, line 239)
#   `assert_output --partial "unpinned action versions"' failed
# 
# -- output does not contain substring --
# substring (1 lines):
#   unpinned action versions
# output (30 lines):
#   [0;32m[INFO][0m 🔍 Starting workflow validation for Claude Code Auto Workflows...
# 
#   [0;34m[VALIDATION][0m Checking YAML syntax...
#   [0;32m[INFO][0m ✅ All workflow files have valid YAML syntax
# 
#   [0;34m[VALIDATION][0m Checking required workflow fields...
# 
#   [0;34m[VALIDATION][0m Checking security best practices...
# 
#   [0;34m[VALIDATION][0m Checking performance optimizations...
# 
#   [0;34m[VALIDATION][0m Checking workflow naming conventions...
# 
#   [0;34m[VALIDATION][0m Checking workflow dependencies...
#   [0;32m[INFO][0m 📦 Actions used in workflows:
#   [0;32m[INFO][0m    •
# 
#   [0;34m[VALIDATION][0m Validation Summary
#   [0;32m[INFO][0m 📊 Validation Results:
#   [0;32m[INFO][0m    Errors: 0
#   [0;32m[INFO][0m    Warnings: 0
#   [0;32m[INFO][0m 🎉 All workflows passed validation!
# 
#   [0;32m[INFO][0m 💡 General Recommendations:
#   [0;32m[INFO][0m    • Pin action versions to specific commits or tags
#   [0;32m[INFO][0m    • Use minimal permissions for security
#   [0;32m[INFO][0m    • Add caching for dependencies
#   [0;32m[INFO][0m    • Use conditional execution to skip unnecessary steps
#   [0;32m[INFO][0m    • Keep workflow files well-documented
#   [0;32m[INFO][0m    • Regularly update action versions
# --
# 
not ok 127 check_security_best_practices warns about missing permissions
# (from function `__assert_stream' in file tests/bats/bats-assert/src/assert_output.bash, line 238,
#  from function `assert_output' in file tests/bats/bats-assert/src/assert_output.bash, line 125,
#  in test file tests/validate-workflows.bats, line 260)
#   `assert_output --partial "No explicit permissions defined"' failed
# 
# -- output does not contain substring --
# substring (1 lines):
#   No explicit permissions defined
# output (30 lines):
#   [0;32m[INFO][0m 🔍 Starting workflow validation for Claude Code Auto Workflows...
# 
#   [0;34m[VALIDATION][0m Checking YAML syntax...
#   [0;32m[INFO][0m ✅ All workflow files have valid YAML syntax
# 
#   [0;34m[VALIDATION][0m Checking required workflow fields...
# 
#   [0;34m[VALIDATION][0m Checking security best practices...
# 
#   [0;34m[VALIDATION][0m Checking performance optimizations...
# 
#   [0;34m[VALIDATION][0m Checking workflow naming conventions...
# 
#   [0;34m[VALIDATION][0m Checking workflow dependencies...
#   [0;32m[INFO][0m 📦 Actions used in workflows:
#   [0;32m[INFO][0m    •
# 
#   [0;34m[VALIDATION][0m Validation Summary
#   [0;32m[INFO][0m 📊 Validation Results:
#   [0;32m[INFO][0m    Errors: 0
#   [0;32m[INFO][0m    Warnings: 0
#   [0;32m[INFO][0m 🎉 All workflows passed validation!
# 
#   [0;32m[INFO][0m 💡 General Recommendations:
#   [0;32m[INFO][0m    • Pin action versions to specific commits or tags
#   [0;32m[INFO][0m    • Use minimal permissions for security
#   [0;32m[INFO][0m    • Add caching for dependencies
#   [0;32m[INFO][0m    • Use conditional execution to skip unnecessary steps
#   [0;32m[INFO][0m    • Keep workflow files well-documented
#   [0;32m[INFO][0m    • Regularly update action versions
# --
# 
not ok 128 check_security_best_practices detects hardcoded secrets
# (from function `__assert_stream' in file tests/bats/bats-assert/src/assert_output.bash, line 238,
#  from function `assert_output' in file tests/bats/bats-assert/src/assert_output.bash, line 125,
#  in test file tests/validate-workflows.bats, line 283)
#   `assert_output --partial "Potential hardcoded secret"' failed
# 
# -- output does not contain substring --
# substring (1 lines):
#   Potential hardcoded secret
# output (30 lines):
#   [0;32m[INFO][0m 🔍 Starting workflow validation for Claude Code Auto Workflows...
# 
#   [0;34m[VALIDATION][0m Checking YAML syntax...
#   [0;32m[INFO][0m ✅ All workflow files have valid YAML syntax
# 
#   [0;34m[VALIDATION][0m Checking required workflow fields...
# 
#   [0;34m[VALIDATION][0m Checking security best practices...
# 
#   [0;34m[VALIDATION][0m Checking performance optimizations...
# 
#   [0;34m[VALIDATION][0m Checking workflow naming conventions...
# 
#   [0;34m[VALIDATION][0m Checking workflow dependencies...
#   [0;32m[INFO][0m 📦 Actions used in workflows:
#   [0;32m[INFO][0m    •
# 
#   [0;34m[VALIDATION][0m Validation Summary
#   [0;32m[INFO][0m 📊 Validation Results:
#   [0;32m[INFO][0m    Errors: 0
#   [0;32m[INFO][0m    Warnings: 0
#   [0;32m[INFO][0m 🎉 All workflows passed validation!
# 
#   [0;32m[INFO][0m 💡 General Recommendations:
#   [0;32m[INFO][0m    • Pin action versions to specific commits or tags
#   [0;32m[INFO][0m    • Use minimal permissions for security
#   [0;32m[INFO][0m    • Add caching for dependencies
#   [0;32m[INFO][0m    • Use conditional execution to skip unnecessary steps
#   [0;32m[INFO][0m    • Keep workflow files well-documented
#   [0;32m[INFO][0m    • Regularly update action versions
# --
# 
ok 129 check_security_best_practices approves proper secret usage
not ok 130 check_performance_optimizations suggests caching
# (from function `__assert_stream' in file tests/bats/bats-assert/src/assert_output.bash, line 238,
#  from function `assert_output' in file tests/bats/bats-assert/src/assert_output.bash, line 125,
#  in test file tests/validate-workflows.bats, line 332)
#   `assert_output --partial "Consider adding dependency caching"' failed
# 
# -- output does not contain substring --
# substring (1 lines):
#   Consider adding dependency caching
# output (30 lines):
#   [0;32m[INFO][0m 🔍 Starting workflow validation for Claude Code Auto Workflows...
# 
#   [0;34m[VALIDATION][0m Checking YAML syntax...
#   [0;32m[INFO][0m ✅ All workflow files have valid YAML syntax
# 
#   [0;34m[VALIDATION][0m Checking required workflow fields...
# 
#   [0;34m[VALIDATION][0m Checking security best practices...
# 
#   [0;34m[VALIDATION][0m Checking performance optimizations...
# 
#   [0;34m[VALIDATION][0m Checking workflow naming conventions...
# 
#   [0;34m[VALIDATION][0m Checking workflow dependencies...
#   [0;32m[INFO][0m 📦 Actions used in workflows:
#   [0;32m[INFO][0m    •
# 
#   [0;34m[VALIDATION][0m Validation Summary
#   [0;32m[INFO][0m 📊 Validation Results:
#   [0;32m[INFO][0m    Errors: 0
#   [0;32m[INFO][0m    Warnings: 0
#   [0;32m[INFO][0m 🎉 All workflows passed validation!
# 
#   [0;32m[INFO][0m 💡 General Recommendations:
#   [0;32m[INFO][0m    • Pin action versions to specific commits or tags
#   [0;32m[INFO][0m    • Use minimal permissions for security
#   [0;32m[INFO][0m    • Add caching for dependencies
#   [0;32m[INFO][0m    • Use conditional execution to skip unnecessary steps
#   [0;32m[INFO][0m    • Keep workflow files well-documented
#   [0;32m[INFO][0m    • Regularly update action versions
# --
# 
not ok 131 check_performance_optimizations suggests conditionals
# (from function `__assert_stream' in file tests/bats/bats-assert/src/assert_output.bash, line 238,
#  from function `assert_output' in file tests/bats/bats-assert/src/assert_output.bash, line 125,
#  in test file tests/validate-workflows.bats, line 354)
#   `assert_output --partial "Consider adding conditional execution"' failed
# 
# -- output does not contain substring --
# substring (1 lines):
#   Consider adding conditional execution
# output (30 lines):
#   [0;32m[INFO][0m 🔍 Starting workflow validation for Claude Code Auto Workflows...
# 
#   [0;34m[VALIDATION][0m Checking YAML syntax...
#   [0;32m[INFO][0m ✅ All workflow files have valid YAML syntax
# 
#   [0;34m[VALIDATION][0m Checking required workflow fields...
# 
#   [0;34m[VALIDATION][0m Checking security best practices...
# 
#   [0;34m[VALIDATION][0m Checking performance optimizations...
# 
#   [0;34m[VALIDATION][0m Checking workflow naming conventions...
# 
#   [0;34m[VALIDATION][0m Checking workflow dependencies...
#   [0;32m[INFO][0m 📦 Actions used in workflows:
#   [0;32m[INFO][0m    •
# 
#   [0;34m[VALIDATION][0m Validation Summary
#   [0;32m[INFO][0m 📊 Validation Results:
#   [0;32m[INFO][0m    Errors: 0
#   [0;32m[INFO][0m    Warnings: 0
#   [0;32m[INFO][0m 🎉 All workflows passed validation!
# 
#   [0;32m[INFO][0m 💡 General Recommendations:
#   [0;32m[INFO][0m    • Pin action versions to specific commits or tags
#   [0;32m[INFO][0m    • Use minimal permissions for security
#   [0;32m[INFO][0m    • Add caching for dependencies
#   [0;32m[INFO][0m    • Use conditional execution to skip unnecessary steps
#   [0;32m[INFO][0m    • Keep workflow files well-documented
#   [0;32m[INFO][0m    • Regularly update action versions
# --
# 
not ok 132 check_performance_optimizations detects parallel opportunities
# (from function `__assert_stream' in file tests/bats/bats-assert/src/assert_output.bash, line 238,
#  from function `assert_output' in file tests/bats/bats-assert/src/assert_output.bash, line 125,
#  in test file tests/validate-workflows.bats, line 379)
#   `assert_output --partial "Multiple jobs detected"' failed
# 
# -- output does not contain substring --
# substring (1 lines):
#   Multiple jobs detected
# output (30 lines):
#   [0;32m[INFO][0m 🔍 Starting workflow validation for Claude Code Auto Workflows...
# 
#   [0;34m[VALIDATION][0m Checking YAML syntax...
#   [0;32m[INFO][0m ✅ All workflow files have valid YAML syntax
# 
#   [0;34m[VALIDATION][0m Checking required workflow fields...
# 
#   [0;34m[VALIDATION][0m Checking security best practices...
# 
#   [0;34m[VALIDATION][0m Checking performance optimizations...
# 
#   [0;34m[VALIDATION][0m Checking workflow naming conventions...
# 
#   [0;34m[VALIDATION][0m Checking workflow dependencies...
#   [0;32m[INFO][0m 📦 Actions used in workflows:
#   [0;32m[INFO][0m    •
# 
#   [0;34m[VALIDATION][0m Validation Summary
#   [0;32m[INFO][0m 📊 Validation Results:
#   [0;32m[INFO][0m    Errors: 0
#   [0;32m[INFO][0m    Warnings: 0
#   [0;32m[INFO][0m 🎉 All workflows passed validation!
# 
#   [0;32m[INFO][0m 💡 General Recommendations:
#   [0;32m[INFO][0m    • Pin action versions to specific commits or tags
#   [0;32m[INFO][0m    • Use minimal permissions for security
#   [0;32m[INFO][0m    • Add caching for dependencies
#   [0;32m[INFO][0m    • Use conditional execution to skip unnecessary steps
#   [0;32m[INFO][0m    • Keep workflow files well-documented
#   [0;32m[INFO][0m    • Regularly update action versions
# --
# 
not ok 133 check_workflow_naming validates naming conventions
# (from function `__assert_stream' in file tests/bats/bats-assert/src/assert_output.bash, line 238,
#  from function `assert_output' in file tests/bats/bats-assert/src/assert_output.bash, line 125,
#  in test file tests/validate-workflows.bats, line 395)
#   `assert_output --partial "Very short filename"' failed
# 
# -- output does not contain substring --
# substring (1 lines):
#   Very short filename
# output (30 lines):
#   [0;32m[INFO][0m 🔍 Starting workflow validation for Claude Code Auto Workflows...
# 
#   [0;34m[VALIDATION][0m Checking YAML syntax...
#   [0;32m[INFO][0m ✅ All workflow files have valid YAML syntax
# 
#   [0;34m[VALIDATION][0m Checking required workflow fields...
# 
#   [0;34m[VALIDATION][0m Checking security best practices...
# 
#   [0;34m[VALIDATION][0m Checking performance optimizations...
# 
#   [0;34m[VALIDATION][0m Checking workflow naming conventions...
# 
#   [0;34m[VALIDATION][0m Checking workflow dependencies...
#   [0;32m[INFO][0m 📦 Actions used in workflows:
#   [0;32m[INFO][0m    •
# 
#   [0;34m[VALIDATION][0m Validation Summary
#   [0;32m[INFO][0m 📊 Validation Results:
#   [0;32m[INFO][0m    Errors: 0
#   [0;32m[INFO][0m    Warnings: 0
#   [0;32m[INFO][0m 🎉 All workflows passed validation!
# 
#   [0;32m[INFO][0m 💡 General Recommendations:
#   [0;32m[INFO][0m    • Pin action versions to specific commits or tags
#   [0;32m[INFO][0m    • Use minimal permissions for security
#   [0;32m[INFO][0m    • Add caching for dependencies
#   [0;32m[INFO][0m    • Use conditional execution to skip unnecessary steps
#   [0;32m[INFO][0m    • Keep workflow files well-documented
#   [0;32m[INFO][0m    • Regularly update action versions
# --
# 
not ok 134 check_dependencies extracts and analyzes actions
# (from function `__assert_stream' in file tests/bats/bats-assert/src/assert_output.bash, line 238,
#  from function `assert_output' in file tests/bats/bats-assert/src/assert_output.bash, line 125,
#  in test file tests/validate-workflows.bats, line 420)
#   `assert_output --partial "actions/checkout@v4"' failed
# 
# -- output does not contain substring --
# substring (1 lines):
#   actions/checkout@v4
# output (30 lines):
#   [0;32m[INFO][0m 🔍 Starting workflow validation for Claude Code Auto Workflows...
# 
#   [0;34m[VALIDATION][0m Checking YAML syntax...
#   [0;32m[INFO][0m ✅ All workflow files have valid YAML syntax
# 
#   [0;34m[VALIDATION][0m Checking required workflow fields...
# 
#   [0;34m[VALIDATION][0m Checking security best practices...
# 
#   [0;34m[VALIDATION][0m Checking performance optimizations...
# 
#   [0;34m[VALIDATION][0m Checking workflow naming conventions...
# 
#   [0;34m[VALIDATION][0m Checking workflow dependencies...
#   [0;32m[INFO][0m 📦 Actions used in workflows:
#   [0;32m[INFO][0m    •
# 
#   [0;34m[VALIDATION][0m Validation Summary
#   [0;32m[INFO][0m 📊 Validation Results:
#   [0;32m[INFO][0m    Errors: 0
#   [0;32m[INFO][0m    Warnings: 0
#   [0;32m[INFO][0m 🎉 All workflows passed validation!
# 
#   [0;32m[INFO][0m 💡 General Recommendations:
#   [0;32m[INFO][0m    • Pin action versions to specific commits or tags
#   [0;32m[INFO][0m    • Use minimal permissions for security
#   [0;32m[INFO][0m    • Add caching for dependencies
#   [0;32m[INFO][0m    • Use conditional execution to skip unnecessary steps
#   [0;32m[INFO][0m    • Keep workflow files well-documented
#   [0;32m[INFO][0m    • Regularly update action versions
# --
# 
not ok 135 generate_summary provides validation results
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/validate-workflows.bats, line 427)
#   `assert_success' failed
# 
# -- command failed --
# status : 1
# output (35 lines):
#   [0;32m[INFO][0m 🔍 Starting workflow validation for Claude Code Auto Workflows...
# 
#   [0;34m[VALIDATION][0m Checking YAML syntax...
#   [0;31m[ERROR][0m Workflow directory not found: .github/workflows
# 
#   [0;34m[VALIDATION][0m Checking required workflow fields...
#   find: ‘.github/workflows’: No such file or directory
# 
#   [0;34m[VALIDATION][0m Checking security best practices...
#   find: ‘.github/workflows’: No such file or directory
# 
#   [0;34m[VALIDATION][0m Checking performance optimizations...
#   find: ‘.github/workflows’: No such file or directory
# 
#   [0;34m[VALIDATION][0m Checking workflow naming conventions...
#   find: ‘.github/workflows’: No such file or directory
# 
#   [0;34m[VALIDATION][0m Checking workflow dependencies...
#   find: ‘.github/workflows’: No such file or directory
#   [0;32m[INFO][0m 📦 Actions used in workflows:
#   [0;32m[INFO][0m    •
# 
#   [0;34m[VALIDATION][0m Validation Summary
#   [0;32m[INFO][0m 📊 Validation Results:
#   [0;32m[INFO][0m    Errors: 1
#   [0;32m[INFO][0m    Warnings: 0
#   [0;31m[ERROR][0m ❌ Workflows have critical errors that need to be fixed
# 
#   [0;32m[INFO][0m 💡 General Recommendations:
#   [0;32m[INFO][0m    • Pin action versions to specific commits or tags
#   [0;32m[INFO][0m    • Use minimal permissions for security
#   [0;32m[INFO][0m    • Add caching for dependencies
#   [0;32m[INFO][0m    • Use conditional execution to skip unnecessary steps
#   [0;32m[INFO][0m    • Keep workflow files well-documented
#   [0;32m[INFO][0m    • Regularly update action versions
# --
# 
not ok 136 generate_summary handles clean validation
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/validate-workflows.bats, line 435)
#   `assert_success' failed
# 
# -- command failed --
# status : 1
# output (35 lines):
#   [0;32m[INFO][0m 🔍 Starting workflow validation for Claude Code Auto Workflows...
# 
#   [0;34m[VALIDATION][0m Checking YAML syntax...
#   [0;31m[ERROR][0m Workflow directory not found: .github/workflows
# 
#   [0;34m[VALIDATION][0m Checking required workflow fields...
#   find: ‘.github/workflows’: No such file or directory
# 
#   [0;34m[VALIDATION][0m Checking security best practices...
#   find: ‘.github/workflows’: No such file or directory
# 
#   [0;34m[VALIDATION][0m Checking performance optimizations...
#   find: ‘.github/workflows’: No such file or directory
# 
#   [0;34m[VALIDATION][0m Checking workflow naming conventions...
#   find: ‘.github/workflows’: No such file or directory
# 
#   [0;34m[VALIDATION][0m Checking workflow dependencies...
#   find: ‘.github/workflows’: No such file or directory
#   [0;32m[INFO][0m 📦 Actions used in workflows:
#   [0;32m[INFO][0m    •
# 
#   [0;34m[VALIDATION][0m Validation Summary
#   [0;32m[INFO][0m 📊 Validation Results:
#   [0;32m[INFO][0m    Errors: 1
#   [0;32m[INFO][0m    Warnings: 0
#   [0;31m[ERROR][0m ❌ Workflows have critical errors that need to be fixed
# 
#   [0;32m[INFO][0m 💡 General Recommendations:
#   [0;32m[INFO][0m    • Pin action versions to specific commits or tags
#   [0;32m[INFO][0m    • Use minimal permissions for security
#   [0;32m[INFO][0m    • Add caching for dependencies
#   [0;32m[INFO][0m    • Use conditional execution to skip unnecessary steps
#   [0;32m[INFO][0m    • Keep workflow files well-documented
#   [0;32m[INFO][0m    • Regularly update action versions
# --
# 
ok 137 main function executes all validation steps
ok 138 main function returns appropriate exit codes
not ok 139 logging functions increment counters correctly
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/validate-workflows.bats, line 485)
#   `assert_success' failed
# 
# -- command failed --
# status : 1
# output (35 lines):
#   [0;32m[INFO][0m 🔍 Starting workflow validation for Claude Code Auto Workflows...
# 
#   [0;34m[VALIDATION][0m Checking YAML syntax...
#   [0;31m[ERROR][0m Workflow directory not found: .github/workflows
# 
#   [0;34m[VALIDATION][0m Checking required workflow fields...
#   find: ‘.github/workflows’: No such file or directory
# 
#   [0;34m[VALIDATION][0m Checking security best practices...
#   find: ‘.github/workflows’: No such file or directory
# 
#   [0;34m[VALIDATION][0m Checking performance optimizations...
#   find: ‘.github/workflows’: No such file or directory
# 
#   [0;34m[VALIDATION][0m Checking workflow naming conventions...
#   find: ‘.github/workflows’: No such file or directory
# 
#   [0;34m[VALIDATION][0m Checking workflow dependencies...
#   find: ‘.github/workflows’: No such file or directory
#   [0;32m[INFO][0m 📦 Actions used in workflows:
#   [0;32m[INFO][0m    •
# 
#   [0;34m[VALIDATION][0m Validation Summary
#   [0;32m[INFO][0m 📊 Validation Results:
#   [0;32m[INFO][0m    Errors: 1
#   [0;32m[INFO][0m    Warnings: 0
#   [0;31m[ERROR][0m ❌ Workflows have critical errors that need to be fixed
# 
#   [0;32m[INFO][0m 💡 General Recommendations:
#   [0;32m[INFO][0m    • Pin action versions to specific commits or tags
#   [0;32m[INFO][0m    • Use minimal permissions for security
#   [0;32m[INFO][0m    • Add caching for dependencies
#   [0;32m[INFO][0m    • Use conditional execution to skip unnecessary steps
#   [0;32m[INFO][0m    • Keep workflow files well-documented
#   [0;32m[INFO][0m    • Regularly update action versions
# --
# 
not ok 140 script handles missing dependencies gracefully
# (from function `__assert_stream' in file tests/bats/bats-assert/src/assert_output.bash, line 238,
#  from function `assert_output' in file tests/bats/bats-assert/src/assert_output.bash, line 125,
#  in test file tests/validate-workflows.bats, line 503)
#   `assert_output --partial "No YAML validator available"' failed
not ok 141 script validates workflow file extensions correctly
# (from function `assert_success' in file tests/bats/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/validate-workflows.bats, line 523)
#   `assert_success' failed
ok 142 handles corrupted workflow files
ok 143 handles very large workflow files
ok 144 validates complex workflow structures
